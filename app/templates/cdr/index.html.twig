<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>CDR Upload</title>
    <style>
        body { font-family: sans-serif; padding: 2rem; }
        table { border-collapse: collapse; width: 100%; margin-top: 1rem; }
        th, td { border: 1px solid #ccc; padding: 0.5rem; text-align: left; }
        th { background: #eee; }
    </style>
</head>
<body>
<h1>Upload CDR CSV</h1>

<form id="upload-form" enctype="multipart/form-data">
    <input type="file" name="file" accept=".csv" required />
    <button type="submit">Upload</button>
</form>

<h2>Uploaded Tasks</h2>
<table id="task-table">
    <thead>
    <tr>
        <th>ID</th>
        <th>File</th>
        <th>Status</th>
        <th>Progress</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody></tbody>
</table>

<h2>Call Detail Records</h2>
<table id="cdr-table">
    <thead>
    <tr>
        <th>Call ID</th>
        <th>Source</th>
        <th>Destination</th>
        <th>Duration</th>
        <th>Timestamp</th>
    </tr>
    </thead>
    <tbody></tbody>
</table>

<script>
    const form = document.getElementById('upload-form');
    const cdrTableBody = document.querySelector('#cdr-table tbody');
    const taskTableBody = document.querySelector('#task-table tbody');

    let shouldPoll = false;

    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(form);
        await fetch('/upload', {
            method: 'POST',
            body: formData
        });
        await fetchTasks();
    });

    async function fetchTable() {
        const res = await fetch('/cdr/list-records');
        if (!res.ok) return;
        const data = await res.json();
        cdrTableBody.innerHTML = '';
        for (const row of data) {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>${row.call_id}</td>
                <td>${row.source}</td>
                <td>${row.destination}</td>
                <td>${row.duration}</td>
                <td>${row.timestamp}</td>
            `;
            cdrTableBody.appendChild(tr);
        }
    }

    async function fetchTasks() {
        const res = await fetch('/cdr/list');
        if (!res.ok) return;

        const data = await res.json();
        taskTableBody.innerHTML = '';
        shouldPoll = false;

        for (const task of data) {
            if (task.status === 'pending' || task.status === 'processing') {
                shouldPoll = true;
            }

            const tr = document.createElement('tr');
            const button = task.status === 'error' || task.status === 'stopped'
                ? `<button onclick="rerunTask(${task.id})">Retry</button>`
                : `<button onclick="viewAggregation(${task.id})">Show</button>`

            const total_lines = task.total_lines;
            const result = task.result;

            tr.innerHTML = `
                <td>${task.id}</td>
                <td>${task.filename}</td>
                <td>${task.status}</td>
                <td>
                    <ul>
                    <li>Proggres: ${total_lines} / ${result.processed}</li>
                    <li>Inserted: ${result.added}</li>
                    <li>Skipped: ${result.skipped}</li>
                    </ul>
                </td>
                <td>${button}</td>
            `;
            taskTableBody.appendChild(tr);
        }
    }

    async function poll() {
        if (shouldPoll) {
            await fetchTasks();
        }
    }

    function viewAggregation(id) {
        alert('TODO: Aggregation for task ' + id);
    }

    function rerunTask(id) {
        fetch(`/upload-task/rerun/${id}`, { method: 'POST' })
            .then(fetchTasks);
    }

    fetchTasks();
    fetchTable();
    setInterval(poll, 1000);
</script>
</body>
</html>