<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>CDR Upload</title>
    <style>
        body { font-family: sans-serif; padding: 2rem; }
        table { border-collapse: collapse; width: 100%; margin-top: 1rem; }
        th, td { border: 1px solid #ccc; padding: 0.5rem; text-align: left; }
        th { background: #eee; }
    </style>
</head>
<body>
<h1>Upload CDR CSV</h1>

<form id="upload-form" enctype="multipart/form-data">
    <input type="file" name="file" accept=".csv" required />
    <button type="submit">Upload</button>
</form>

<h2>Uploaded Tasks</h2>
<table id="task-table">
    <thead>
    <tr>
        <th>ID</th>
        <th>File</th>
        <th>Status</th>
        <th>Progress</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody></tbody>
</table>

<h2>Call Detail Records</h2>
<table id="cdr-table">
    <thead>
    <tr>
        <th>Customer ID</th>
        <th>Same Calls</th>
        <th>Same Duration</th>
        <th>Total Calls</th>
        <th>Total Duration</th>
    </tr>
    </thead>
    <tbody></tbody>
</table>

<script>
    const form = document.getElementById('upload-form');
    const cdrTableBody = document.querySelector('#cdr-table tbody');
    const taskTableBody = document.querySelector('#task-table tbody');

    let waitUploadTask = false;
    let showedStats = false;

    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(form);
        await fetch('/upload', {
            method: 'POST',
            body: formData
        });
        await fetchTasks();
    });

    async function fetchTable(id) {
        console.log(id);
        const res = await fetch(`/cdr/records/${id}`);
        if (!res.ok) return;
        const data = await res.json();

        console.log(data);

        cdrTableBody.innerHTML = '';
        for (const row of data) {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>${row.customer_id}</td>
                <td>${row.same_calls}</td>
                <td>${row.same_duration}</td>
                <td>${row.total_calls}</td>
                <td>${row.total_duration}</td>
            `;
            cdrTableBody.appendChild(tr);
        }
    }

    async function fetchTasks() {
        const res = await fetch('/cdr/list');
        if (!res.ok) return;

        const data = await res.json();
        taskTableBody.innerHTML = '';
        waitUploadTask = false;

        Object.keys(data).forEach((index) => {
            const task = data[index];
            const taskId = task.id;
            const taskData = task.status;
            const uploadTask = taskData.upload;
            const statsTask = taskData.stats || null;
            const uploadStatus = uploadTask.status;
            const statsStatus = statsTask ? statsTask.status : 'new';

            if ((uploadStatus !== 'finished' && uploadStatus !== 'error') || (uploadStatus === 'finished' && statsStatus !== 'finished' && statsStatus !== 'error') ) {
                waitUploadTask = true;
            }

            let buttons = '';

            if (uploadStatus === 'finished' && statsStatus === 'finished') {
                buttons = `<button onclick="viewStats(${taskId})">Show Stats</button>
                            <button onclick="recalculateTask(${taskId})">Recalculate</button>`;
            } else if (uploadStatus === 'error' && statsStatus === 'error') {
                buttons = `<button onclick="rerunTask(${taskId})">Retry</button>`
            }

            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>${task.id}</td>
                <td>${task.filename}</td>
                <td><ul>
                    <li>Upload Task: ${uploadStatus}</li>
                    <li>Calculate Task: ${statsStatus}</li>
                    </ul>
                </td>
                <td>
                    <ul>
                    <li>Upload Task: <br/>records: ${uploadTask.total_lines || 0} / ${uploadTask.processed || 0}</li>
                    <li>Calculate stats: <br/>records: ${statsTask ? statsTask.total_lines : 0} / ${statsTask ? statsTask.calculated_lines : 0}</li>
                    </ul>
                </td>
                <td>${buttons}</td>
            `;
            taskTableBody.appendChild(tr);
        })
    }

    async function poll() {
        if (waitUploadTask) {
            await fetchTasks();
        }
    }

    function viewStats(id) {
        fetchTable(id);
    }

    function rerunTask(id) {
        fetch(`/task/rerun/${id}`, { method: 'POST' })
            .then(fetchTasks);
    }

    function recalculateTask(id) {
        fetch(`/task/recalculate/${id}`, { method: 'POST' })
            .then(fetchTasks);
    }

    fetchTasks();
    setInterval(poll, 2000);
</script>
</body>
</html>